@page "/Cursos"

<PageTitle>Cursos e Pontuações</PageTitle>

<MudItem xs="12" md="8" class="items-left">
    <h1>
        <MudIcon Icon="@Icons.Material.Outlined.ListAlt" />
        Cursos e Pontuações!
    </h1>
    <p class="font-normal text-left ml-8">
        <i>Pesquise os cursos e suas pontuações!</i>
    </p>
</MudItem>

<br />

<MudGrid>
    <!-- Seção à esquerda com os campos de seleção e notas -->
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h5" Class="mb-4">UFS: CAMPUS ARACAJU</MudText>

        <MudSelect T="string" @bind-Value="selectedCurso" Label="Curso" Class="mb-2" @onchange="UpdateData">
            @foreach (var curso in cursos.Select(c => c.Nome).Distinct())
            {
                <MudSelectItem Value="@curso">@curso</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="string" @bind-Value="selectedTurno" Label="Turno" Class="mb-2" @onchange="UpdateData">
            @if (!string.IsNullOrEmpty(selectedCurso))
            {
                @foreach (var turno in cursos.Where(c => c.Nome == selectedCurso).Select(c => c.Turno).Distinct())
                {
                    <MudSelectItem Value="@turno">@turno</MudSelectItem>
                }
            }
        </MudSelect>

        <MudField Label="Nota de Corte/2022"
                  Value="@GetPontuacao(selectedTurno, 2022)"
                  Adornment="@(!string.IsNullOrEmpty(GetPontuacao(selectedTurno, 2022)) ? Adornment.End : Adornment.None)"
                  AdornmentIcon="@(!string.IsNullOrEmpty(GetPontuacao(selectedTurno, 2022)) ? Icons.Material.Filled.CheckCircle : null)"
                  AdornmentColor="@(!string.IsNullOrEmpty(GetPontuacao(selectedTurno, 2022)) ? Color.Success : Color.Transparent)">
            @GetPontuacao(selectedTurno, 2022)
        </MudField>

        <MudField Label="Nota de Corte/2023"
                  Value="@GetPontuacao(selectedTurno, 2023)"
                  Adornment="@(!string.IsNullOrEmpty(GetPontuacao(selectedTurno, 2023)) ? Adornment.End : Adornment.None)"
                  AdornmentIcon="@(!string.IsNullOrEmpty(GetPontuacao(selectedTurno, 2023)) ? Icons.Material.Filled.CheckCircle : null)"
                  AdornmentColor="@(!string.IsNullOrEmpty(GetPontuacao(selectedTurno, 2023)) ? Color.Success : Color.Transparent)">
            @GetPontuacao(selectedTurno, 2023)
        </MudField>
        
            <MudButton StartIcon="@Icons.Material.Filled.Info" IconColor="Color.Info" Size="Size.Medium" @onclick="ToggleCollapse">
                Confira os Pesos
            </MudButton>        
    </MudItem>

    <!-- Seção à direita com Tabs -->
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h5" Class="mb-4">CALCULADORA</MudText>
        <MudTabs Elevation="4" Rounded="true" Centered="false" Color="@Color.Default">
            <MudTabPanel Text="Por Notas">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5"></MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudTextField Label="Nota da Matemática" @bind-Value="MathScore" Type="number" Variant="Variant.Filled" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField Label="Nota da Linguagens" @bind-Value="LanguageScore" Type="number" Variant="Variant.Filled" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField Label="Nota de Ciências da Natureza" @bind-Value="NatureSciencesScore" Type="number" Variant="Variant.Filled" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField Label="Nota de Ciências Humanas" @bind-Value="HumanSciencesScore" Type="number" Variant="Variant.Filled" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField Label="Nota da Redação" @bind-Value="EssayScore" Type="number" Variant="Variant.Filled" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CalculateScore">Calcular Nota</MudButton>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Nota Final: @FinalScore</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>
            <MudTabPanel Text="Por Peso">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5"></MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value="MathScore" Label="Nota de Matemática" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" />
                        <MudTextField @bind-Value="LanguageScore" Label="Nota de Linguagens" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" />
                        <MudTextField @bind-Value="NatureSciencesScore" Label="Nota de Ciências da Natureza" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" />
                        <MudTextField @bind-Value="HumanSciencesScore" Label="Nota de Ciências Humanas" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" />
                        <MudTextField @bind-Value="EssayScore" Label="Nota da Redação" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" />

                        <MudButton OnClick="CalculateScore" Variant="Variant.Filled" Color="Color.Primary">Calcular Pontuação Final</MudButton>

                        @if (FinalScore >= 0)
                        {
                            <MudText Typo="Typo.h6">Pontuação Final: @FinalScore</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>
        </MudTabs>
    </MudItem>
</MudGrid>

<MudGrid>
    <!-- Seção de Pesos -->                    
    <MudCollapse Expanded="_expanded">
        <MudText Typo="Typo.h6" Align="Align.Left" Class="mb-0 ml-8 mt-[0px]">
                Pesos ENEM: Curso de Direito em Aracaju
            </MudText>
            <MudDivider />
            <ul class="mud-list" style="list-style-type: none; padding-left: 1.5rem; margin: 0;">
                <li class="mud-list-item" style="padding: 8px; display: flex; align-items: center;">
                    <MudIcon Icon="@Icons.Material.Outlined.Code" />
                    <MudText Class="ml-2">Linguagens, Códigos e suas Tecnologias: <strong>30%</strong></MudText>
                </li>
                <li class="mud-list-item" style="padding: 8px; display: flex; align-items: center;">
                    <MudIcon Icon="@Icons.Material.Outlined.Calculate" />
                    <MudText Class="ml-2">Matemática e suas Tecnologias: <strong>20%</strong></MudText>
                </li>
                <li class="mud-list-item" style="padding: 8px; display: flex; align-items: center;">
                    <MudIcon Icon="@Icons.Material.Outlined.Nature" />
                    <MudText Class="ml-2">Ciências da Natureza e suas Tecnologias: <strong>10%</strong></MudText>
                </li>
                <li class="mud-list-item" style="padding: 8px; display: flex; align-items: center;">
                    <MudIcon Icon="@Icons.Material.Outlined.Book" />
                    <MudText Class="ml-2">Ciências Humanas e suas Tecnologias: <strong>40%</strong></MudText>
                </li>
            </ul>                   
    </MudCollapse>    
</MudGrid>



@code {
    bool _expanded = false;
    private void ToggleCollapse()
    {
        _expanded = !_expanded;
    }

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }    

    // Classe para representar os dados de um curso
    public class Curso
    {
        public string Nome { get; set; }
        public string Turno { get; set; }
        public string Pontuacao2022 { get; set; }
        public string Pontuacao2023 { get; set; }
    }

    // Lista de cursos
    private List<Curso> cursos = new List<Curso>
    {
        new Curso { Nome = "Direito", Turno = "Manhã", Pontuacao2022 = "500", Pontuacao2023 = "400" },
        new Curso { Nome = "Medicina", Turno = "Tarde", Pontuacao2022 = "400", Pontuacao2023 = "300" },
        new Curso { Nome = "Jornalismo", Turno = "Noite", Pontuacao2022 = "500", Pontuacao2023 = "400" },
        new Curso { Nome = "Enfermagem", Turno = "Tarde", Pontuacao2022 = "200", Pontuacao2023 = "150" },
        new Curso { Nome = "Enfermagem", Turno = "Noite", Pontuacao2022 = "100", Pontuacao2023 = "80" },
        new Curso { Nome = "Design", Turno = "Manhã", Pontuacao2022 = "800", Pontuacao2023 = "600" }
    };

    private string selectedCurso { get; set; }
    private string selectedTurno { get; set; }
    private string selectedPontuacao2022 { get; set; }
    private string selectedPontuacao2023 { get; set; }

    private void UpdateData()
    {
        var cursoSelecionado = cursos.FirstOrDefault(c => c.Nome == selectedCurso && c.Turno == selectedTurno);

        if (cursoSelecionado != null)
        {
            selectedPontuacao2022 = cursoSelecionado.Pontuacao2022;
            selectedPontuacao2023 = cursoSelecionado.Pontuacao2023;
        }
        else
        {
            selectedPontuacao2022 = string.Empty;
            selectedPontuacao2023 = string.Empty;
        }
    }

    private string GetPontuacao(string turno, int ano)
    {
        var cursoSelecionado = cursos.FirstOrDefault(c => c.Turno == turno);

        return cursoSelecionado != null
            ? (ano == 2022 ? cursoSelecionado.Pontuacao2022 : cursoSelecionado.Pontuacao2023)
            : string.Empty;
    }

    private double MathScore { get; set; }
    private double LanguageScore { get; set; }
    private double NatureSciencesScore { get; set; }
    private double HumanSciencesScore { get; set; }
    private double EssayScore { get; set; }
    private double FinalScore { get; set; }

    private void CalculateScore()
    {
        // Fórmula exemplo, adapte conforme necessário
        FinalScore = (MathScore + LanguageScore + NatureSciencesScore + HumanSciencesScore + EssayScore) / 5;
    }


   
}
