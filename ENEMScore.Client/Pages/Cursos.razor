@page "/Cursos"
@using ENEMScore.Client.Data
@inject HttpClient Http
@using System.Text.Json.Serialization;
@using System.Net.Http.Json


<style>
    .filters {
        display: flex;
        flex-direction: column;
        align-items: center; /* Alinha todos os elementos filhos ao centro */
        gap: 15px;
        padding: 20px;
       
        border-radius: 10px;
        background-color: #f7f7f7;
    }

    .field {
        display: flex;
        flex-direction: column;
        align-items: flex-start; /* Alinha os rótulos e campos no início */
        width: 100%; /* Garante que o campo ocupe toda a largura do contêiner */
    }

        .field label {
            width: 100%; /* Garante que o label ocupe toda a largura */
        }

    .filters select {
        width: 100%; /* Define um tamanho consistente para todos os selects */
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
        transition: border-color 0.3s, background-color 0.3s;
    }

        .filters select:focus {
            border-color: #007bff;
            background-color: #fff;
            outline: none;
        }

    h4 {
        margin-top: 20px;
        color: #333;
    }

    .nota-de-corte {
        display: flex;
        flex-direction: row; /* Mudado de 'column' para 'row' */
        align-items: center; /* Alinha verticalmente os itens no centro */
        padding: 10px;
        margin: 5px 0;
        border-radius: 3px;
        background-color: #e6e6e6;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        font-size: 14px;
        width: 250px;
    }

    .line-numbers.light {
        color: black;
    }

    .line-numbers.dark {
        color: white;
    }
    
</style>



<PageTitle>Cursos e Pontuações</PageTitle>

<MudItem xs="12" md="8" class="items-left">
    <h1>
        <MudIcon Icon="@Icons.Material.Outlined.ListAlt" />
        Cursos e Pontuações!
    </h1>
    <p class="font-normal text-left ml-8">
        <i>Pesquise os cursos e suas pontuações!</i>
    </p>
</MudItem>

<br />

<!--FORMS-->
<MudGrid>
    <MudItem xs="12" md="6" mb="auto">
        <MudText Typo="Typo.h5" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-2" />
            UNIVERSIDADE FEDERAL: (UFS) / INSTITUTO FEDERAL: (IFS)
        </MudText>
    
        <div class="filters">
            <div class="field">
                <label class="line-numbers @(isDarkTheme ? "dark" : "light")">
                    Universidade:
                    <select value="@selectedUniversidade" @onchange="HandleUniversidadeChange">
                        <option value="">Selecione uma Universidade</option>
                        @foreach (var universidade in universidades)
                        {
                            <option value="@universidade">@universidade</option>
                        }
                    </select>
                </label>
            </div>

            <div class="field">
                <label class="line-numbers @(isDarkTheme ? "dark" : "light")">
                    Campus:
                    <select value="@selectedCampus" @onchange="HandleCampusChange">
                        <option value="">Selecione um Campus</option>
                        @foreach (var campus in campi)
                        {
                            <option value="@campus">@campus</option>
                        }
                    </select>
                </label>
            </div>

            <div class="field">
                <label class="line-numbers @(isDarkTheme ? "dark" : "light")">
                    Ano:
                    <select value="@selectedAno" @onchange="HandleAnoChange">
                        <option value="">Selecione um Ano</option>
                        @foreach (var ano in anos)
                        {
                            <option value="@ano">@ano</option>
                        }
                    </select>
                </label>
            </div>

            <div class="field">
                <label class ="line-numbers @(isDarkTheme ? "dark" : "light")">
                    Curso:
                    <select value="@selectedCurso" @onchange="HandleCursoChange">
                        <option value="">Selecione um Curso</option>
                        @foreach (var curso in cursosDisponiveis)
                        {
                            <option value="@curso">@curso</option>
                        }
                    </select>
                </label>
            </div>

            <div class="field">
                <label class="line-numbers @(isDarkTheme ? "dark" : "light")">
                    Turno:
                    <select value="@selectedTurno" @onchange="HandleTurnoChange">
                        <option value="">Selecione um Turno</option>
                        @foreach (var turno in turnos)
                        {
                            <option value="@turno">@turno</option>
                        }
                    </select>
                </label>
            </div>

            <div class="field">
                <label class="line-numbers @(isDarkTheme ? "dark" : "light")">
                    Tipo:
                    <select value="@selectedTipo" @onchange="HandleTipoChange">
                        <option value="">Selecione um Tipo</option>
                        @foreach (var tipo in tipos)
                        {
                            <option value="@tipo" title="@tipo">@GetShortDescription(tipo)</option>
                        }
                    </select>
                </label>
            </div>

            @if (notaDeCorte.HasValue)
            {
                <div class="nota-de-corte line-numbers @(isDarkTheme ? "dark" : "light")">
                    <MudIcon Icon="@Icons.Material.Filled.BarChart" style="margin-right: 8px;" />
                    Nota de Corte: <strong> @notaDeCorte.Value.ToString("N2")</strong>
                </div>
            }
            else
            {
                <div class="nota-de-corte line-numbers @(isDarkTheme ? "dark" : "light")">
                    <MudIcon Icon="@Icons.Material.Filled.BarChart" style="margin-right: 8px;" />
                    Nota de Corte:
                </div>
            }
        </div>

    

    </MudItem>

    <!-- CALCULADORA Seção à direita com Tabs -->

    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h5" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Outlined.Calculate" Class="me-2" /> CALCULADORA
        </MudText>
        <MudTabs Elevation="4" Rounded="true" Centered="false" Color="@Color.Primary">
            <MudTabPanel Text="Por Notas">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">Calculadora por Notas</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <!-- Campos para notas -->
                            <MudItem xs="12" sm="6" Class="mb-3">
                                <MudTextField Label="Nota de Matemática" @bind-Value="MathScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12" sm="6" Class="mb-3">
                                <MudTextField Label="Nota de Linguagens" @bind-Value="LanguageScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12" sm="6" Class="mb-3">
                                <MudTextField Label="Nota de Ciências da Natureza" @bind-Value="NatureSciencesScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12" sm="6" Class="mb-3">
                                <MudTextField Label="Nota de Ciências Humanas" @bind-Value="HumanSciencesScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12" Class="mb-3">
                                <MudTextField Label="Nota da Redação" @bind-Value="EssayScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <!-- Botão para calcular média -->
                            <MudItem xs="12" Class="mb-3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CalculateAverageScore">Calcular Média</MudButton>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Nota Final: @FinalScore</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>
            <MudTabPanel Text="Por Peso">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">Calculadora por Pesos</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <!-- Reutiliza os mesmos campos, já que são os mesmos dados -->
                            <MudItem xs="12" md="6" Class="mb-3">
                                <MudTextField @bind-Value="MathScore" Label="Nota de Matemática" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="6" Class="mb-3">
                                <MudTextField @bind-Value="LanguageScore" Label="Nota de Linguagens" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="6" Class="mb-3">
                                <MudTextField @bind-Value="NatureSciencesScore" Label="Nota de Ciências da Natureza" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="6" Class="mb-3">
                                <MudTextField @bind-Value="HumanSciencesScore" Label="Nota de Ciências Humanas" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" Class="mb-3">
                                <MudTextField @bind-Value="EssayScore" Label="Nota da Redação" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <!-- Botão para calcular com pesos -->
                            <MudItem xs="12" Class="mb-3">
                                <MudButton OnClick="CalculateWeightedScore" Variant="Variant.Filled" Color="Color.Primary">Calcular com Pesos</MudButton>
                            </MudItem>
                            @if (WeightedScore >= 0)
                            {
                                <MudItem xs="12">
                                    <MudText Typo="Typo.h6">Pontuação Final: @WeightedScore</MudText>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>
        </MudTabs>
    </MudItem>

</MudGrid>

@code {

    private bool isDarkTheme = false; // Defina para true para tema escuro, ou configure dinamicamente
    public void ToggleCollapse() => _expanded = !_expanded;
    public bool _expanded = false;
   
    // Variáveis para as notas
    public double MathScore { get; set; }
    public double LanguageScore { get; set; }
    public double NatureSciencesScore { get; set; }
    public double HumanSciencesScore { get; set; }
    public double EssayScore { get; set; }
    public double FinalScore { get; set; }  // Inicializa com -1 para verificação de exibição
    public double WeightedScore { get; set; }  // Pontuação com pesos

    // Método para calcular a média simples das notas
    public void CalculateAverageScore()
    {
        FinalScore = (MathScore + LanguageScore + NatureSciencesScore + HumanSciencesScore + EssayScore) / 5;
    }

    // Método para calcular a pontuação com base nos pesos
    public void CalculateWeightedScore()
    {
        // Definindo os pesos
        double mathWeight = 3.0;
        double languageWeight = 2.0;
        double natureSciencesWeight = 2.5;
        double humanSciencesWeight = 2.0;
        double essayWeight = 2.5;

        // Calculando a pontuação com pesos
        WeightedScore = (MathScore * mathWeight) +
                        (LanguageScore * languageWeight) +
                        (NatureSciencesScore * natureSciencesWeight) +
                        (HumanSciencesScore * humanSciencesWeight) +
                        (EssayScore * essayWeight);

        // Dividindo pelo total dos pesos para normalizar
        double totalWeight = mathWeight + languageWeight + natureSciencesWeight + humanSciencesWeight + essayWeight;
        WeightedScore /= totalWeight;
    }

    // Filtragem dos Campos de Pesquisa
    private List<CursoInfo> cursos = new List<CursoInfo>();
    private string selectedUniversidade = string.Empty;
    private string selectedCampus = string.Empty;
    private int? selectedAno;
    private string selectedCurso = string.Empty;
    private string selectedTurno = string.Empty;
    private string selectedTipo = string.Empty;
    private double? notaDeCorte;

    private List<string> universidades = new List<string>();
    private List<string> campi = new List<string>();
    private List<int> anos = new List<int>();
    private List<string> cursosDisponiveis = new List<string>();
    private List<string> turnos = new List<string>();
    private List<string> tipos = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        cursos = await Http.GetFromJsonAsync<List<CursoInfo>>("Data/lista.json");
        universidades = cursos.Select(c => c.Universidade).Distinct().ToList();
        // Inicialmente, todos os demais dropdowns estão vazios até que uma escolha seja feita
    }

    private async Task HandleUniversidadeChange(ChangeEventArgs e)
    {
        selectedUniversidade = e.Value.ToString();
        campi = cursos.Where(c => c.Universidade == selectedUniversidade)
                      .Select(c => c.Campus).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Universidade");
    }

    private async Task HandleCampusChange(ChangeEventArgs e)
    {
        selectedCampus = e.Value.ToString();
        anos = cursos.Where(c => c.Campus == selectedCampus)
                     .Select(c => c.Ano).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Campus");
    }

    private async Task HandleAnoChange(ChangeEventArgs e)
    {
        selectedAno = int.Parse(e.Value.ToString());
        cursosDisponiveis = cursos.Where(c => c.Campus == selectedCampus && c.Ano == selectedAno)
                                  .Select(c => c.Curso).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Ano");
    }

    private async Task HandleCursoChange(ChangeEventArgs e)
    {
        selectedCurso = e.Value.ToString();
        turnos = cursos.Where(c => c.Curso == selectedCurso)
                       .Select(c => c.Turno).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Curso");
    }

    private async Task HandleTurnoChange(ChangeEventArgs e)
    {
        selectedTurno = e.Value.ToString();
        tipos = cursos.Where(c => c.Turno == selectedTurno && c.Curso == selectedCurso)
                      .Select(c => c.Tipo).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Turno");
    }

    private async Task HandleTipoChange(ChangeEventArgs e)
    {
        selectedTipo = e.Value.ToString();
        UpdateNotaDeCorte();
    }

    private void UpdateNotaDeCorte()
    {
        notaDeCorte = cursos.FirstOrDefault(c => c.Universidade == selectedUniversidade &&
                                                 c.Campus == selectedCampus &&
                                                 c.Ano == selectedAno &&
                                                 c.Curso == selectedCurso &&
                                                 c.Turno == selectedTurno &&
                                                 c.Tipo == selectedTipo)?.NotaDeCorte;
    }

    private void ResetLowerFilters(string fromLevel)
    {
        switch (fromLevel)
        {
            case "Universidade":
                selectedCampus = null;
                anos.Clear();
                cursosDisponiveis.Clear();
                turnos.Clear();
                tipos.Clear();
                break;
            case "Campus":
                selectedAno = null;
                cursosDisponiveis.Clear();
                turnos.Clear();
                tipos.Clear();
                break;
            case "Ano":
                selectedCurso = null;
                turnos.Clear();
                tipos.Clear();
                break;
            case "Curso":
                selectedTurno = null;
                tipos.Clear();
                break;
            case "Turno":
                selectedTipo = null;
                break;
        }
        notaDeCorte = null; // Reset the score when changing any filter above
        StateHasChanged(); // Force re-rendering to update the UI
    }


    private string GetShortDescription(string fullDescription)
    {
        // Truncates the description if it is too long for the dropdown display
        if (fullDescription.Length > 90)
        {
            return fullDescription.Substring(0, 70) + "...";
        }
        return fullDescription;
    }
}



