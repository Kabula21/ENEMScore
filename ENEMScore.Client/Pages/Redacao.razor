@page "/Redacao"
@page "/seu-componente"
@using MudBlazor
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Text.RegularExpressions

<PageTitle>Teste Sua Redação</PageTitle>

<style>
    .text-field-container {
        display: flex;
        width: 100%;
        position: relative;
    }

    .line-numbers {
        width: 20px;
        text-align: right;
        padding-right: 5px;
        background-color: #f5f5f5;
        border-right: 1px solid #ccc;
    }

        .line-numbers div {
            height: 20px; /* Ajuste conforme necessário */
            line-height: 20px;
        }

    .MudTextField {
        /* Ensure the text field doesn't overlap with the line numbers */
        box-sizing: border-box;
    }

    .line-numbers.light {
        color: black;
    }

    .line-numbers.dark {
        color: white;
    }


</style>

<MudItem xs="12" md="8" class="items-left">
    <h1>
        <MudIcon Icon="@Icons.Material.Outlined.ListAlt" />
        Editor de Redação!
    </h1>

    <p class="font-normal text-left ml-8">
        <i>*ATENÇÃO! Antes de começar leia as REGRAS! --> </i>
        <MudTooltip Text="Veja as Regras">
            <MudToggleIconButton @bind-Toggled="@_open" Icon="@Icons.Material.Filled.Info" Color="@Color.Info" ToggledIcon="@Icons.Material.Filled.FullscreenExit" ToggledColor="@Color.Secondary" />
        </MudTooltip>

        <MudPopover Open="@_open" Fixed="true" Class="px-4 pt-4">
            <div class="d-flex flex-column">
                <MudText>
                    <h3>Sobre o Texto</h3>
                    • Domínio da escrita formal em língua portuguesa.<br>
                    • Compreensão do tema e aplicação das áreas de conhecimento.<br>
                    • Capacidade de interpretação das informações e organização dos argumentos.<br>
                    • Domínio dos mecanismos linguísticos de argumentação.
                    <br><br />
                    <h3>Cálculo da Nota</h3>
                    <h3> O seu texto deve ter entre <strong>7</strong> e <strong>30</strong> linhas.</h3>
                    <i>Valores menores ou maiores sua nota será comprometida.</i><br /><br />
                    A nota final é a soma das notas de cada competência. 
                    Cada competência é avaliada em <br />uma escala de <strong>0</strong> a <strong>200</strong> pontos,
                    e a soma das notas das <strong>cinco</strong> competências resulta na<br /> nota final da redação, 
                    que pode variar de <strong>0</strong> a <strong>1000</strong> pontos.<br><br>
                </MudText>

                <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Variant="Variant.Filled" Color="Color.Primary">Fechar</MudButton>
            </div>
        </MudPopover>
    </p>
</MudItem>

<br />

<MudGrid Class="flex flex-nowrap">
    <MudItem class="mt-4">
        <h2>Preencha seus dados:</h2>
    </MudItem>
    <MudItem xs="12" sm="3" Class="flex items-center">
        <MudTextField @bind-Value="nomeAluno" Label="Nome do Aluno" Placeholder="Digite seu Nome" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" Variant="Variant.Outlined" Error="@isNomeAlunoError" />
        @if (isNomeAlunoError)
        {
            <MudText Typo="Typo.body2" Color="Color.Error">Campo obrigatório</MudText>
        }
    </MudItem>
    <MudItem xs="12" sm="3" Class="flex-shrink-0">
        <MudSelect @bind-Value="ano" Label="Ano" Placeholder="Selecione o Ano" T="int?" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.School" Variant="Variant.Outlined">
            <MudSelectItem T="int?" Value="1">1ª Ano Ensino Médio</MudSelectItem>
            <MudSelectItem T="int?" Value="2">2ª Ano Ensino Médio</MudSelectItem>
            <MudSelectItem T="int?" Value="3">3ª Ano Ensino Médio</MudSelectItem>
        </MudSelect>
        @if (isAnoError)
        {
            <MudText Typo="Typo.body2" Color="Color.Error">Campo obrigatório</MudText>
        }
    </MudItem>
    <MudItem xs="12" sm="3" Class="flex-shrink-0">
        <MudSelect @bind-Value="turma" Label="Turma" T="int?" Placeholder="Selecione a Turma" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Group" Variant="Variant.Outlined">
           <MudSelectItem T="int?" Value="1">Turma A</MudSelectItem>
            <MudSelectItem T="int?" Value="2">Turma B</MudSelectItem>
            <MudSelectItem T="int?" Value="3">Turma C</MudSelectItem>
            <MudSelectItem T="int?" Value="4">Turma D</MudSelectItem>
        </MudSelect>
        @if (isTurmaError)
        {
            <MudText Typo="Typo.body2" Color="Color.Error">Campo obrigatório</MudText>
        }
    </MudItem>
</MudGrid>


<br>

<div style="display: flex; justify-content: space-between; align-items: center; padding: 16px;">
    <p class="font-normal text-left">
        <i>Clique e escolha um tema!</i> <MudIcon Icon="@Icons.Material.Filled.ArrowDownward"></MudIcon>
    </p>

    <MudButton StartIcon="@Icons.Material.Rounded.Refresh" OnClick="@RefreshPage" Variant="Variant.Outlined" Color="Color.Default">
        Atualize os Temas
    </MudButton>

</div>

<!--CARDS-->

<MudGrid>
    <MudItem xs="12" sm="6" md="4" lg="4">
        <MudCard @onclick='() => UpdateTextFieldTitle(cardTitles[0])'
                 style="border-radius: 12px; width: 100%; max-width: 500px; margin: auto; background-color: #37474F;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Tertiary">@cardTitles[0]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Color="Color.Tertiary">
                    <i>Para textos de apoio clique -></i>
                    <MudTooltip Text="Textos de Apoio">
                        <MudLink Href="@($"https://www.google.com/search?q={Uri.EscapeDataString(cardTitles[0])}")" Target="_blank">
                            <MudIconButton Icon="@Icons.Material.Filled.Web" Color="Color.Tertiary" />
                        </MudLink>
                    </MudTooltip>
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="4">
        <MudCard @onclick='() => UpdateTextFieldTitle(cardTitles[1])'
                 style="border-radius: 12px; width: 100%; max-width: 500px; margin: auto; background-color: #4E342E;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Tertiary">@cardTitles[1]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Color="Color.Tertiary">
                    <i>Para textos de apoio clique -></i>
                    <MudTooltip Text="Textos de Apoio">
                        <MudLink Href="@($"https://www.google.com/search?q={Uri.EscapeDataString(cardTitles[1])}")" Target="_blank">
                            <MudIconButton Icon="@Icons.Material.Filled.Web" Color="Color.Tertiary" />
                        </MudLink>
                    </MudTooltip>

                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="4">
        <MudCard @onclick='() => UpdateTextFieldTitle(cardTitles[2])'
                 style="border-radius: 12px; width: 100%; max-width: 500px; margin: auto; background-color: #004D40;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Tertiary">@cardTitles[2]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Color="Color.Tertiary">
                    <i>Para textos de apoio clique -></i>
                    <MudTooltip Text="Textos de Apoio">
                        <MudLink Href="@($"https://www.google.com/search?q={Uri.EscapeDataString(cardTitles[2])}")" Target="_blank">
                            <MudIconButton Icon="@Icons.Material.Filled.Web" Color="Color.Tertiary" />
                        </MudLink>
                    </MudTooltip>
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<br>

<!--SAMPLE TEXT-->
<div style="display: flex; justify-content: center; align-items: center;">
    <MudText Elevation="3" Typo="Typo.h5" Color="Color.Tertiary"
         Style="display: flex; justify-content: center; align-items: center; text-align: center; 
                background-color: darkslategrey; border-radius: 3px; width: 1000px; 
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
        @if (string.IsNullOrEmpty(sampleTitle))
        {
            <span style="color: bisque;">Folha de Redação</span>
        }
        else
        {
            @sampleTitle
        }
    </MudText>
</div>


<!--EDITOR DE TEXTO ANTIGO-->

<div class="text-field-container" style="display: flex; justify-content: center; width: 100%; padding: 15px;">
    <div style="display: flex; align-items: flex-start; margin-left: 2%; width: 1000px;">
        <div class="line-numbers @(isDarkTheme ? "dark" : "light")" style="padding-right: 10px; padding-top: 2px; text-align: right; user-select: none; font-family: monospace; background: white;">
            @for (int i = 1; i <= 35; i++)
            {
                <div style="height: 20px; line-height: 20px;">@i</div>
            }
        </div>

        <MudTextField T="string" @bind-Value="sampleText" Variant="Variant.Text" @oninput="OnTextChanged" Lines="35"
                      Style="width: calc(100% - 40px); height: calc(35 * 20px); background-image: repeating-linear-gradient(white, white 19px, #444 20px);
                    background-size: 100% 20px; line-height: 20px; padding: 10px 10px 10px 30px; font-family: monospace; overflow: hidden;
                    box-shadow: 10px 4px 15px rgba(8, 10, 15, 0.2); border: 2px solid #ddd; border-radius: 4px;" />
    </div>
</div>

<!--BOTAO DE ENVIAR-->

<div style="display: flex; align-items: center; gap: 10px; justify-content: center;">
    <MudButton Variant="Variant.Filled" DropShadow="true" Color="Color.Warning" OnClick="@StartProgress"
        class="h-10" style="max-width: 100px;">Enviar</MudButton>
    <MudProgressLinear Color="Color.Warning" Value="@Value" style="flex-grow: 1; max-width: 900px;" Striped="true" Size="Size.Large" />
</div>

<!--POPUP-->

<MudPopover Open="@_open2" Fixed="true"
            Style="position: fixed; top: 0%; margin-left: 30%; width: 90vw; max-width: 600px; height: 690vw; max-height: 690px; padding: 16px; box-sizing: border-box;"
            OnOpen="EmitirNota">
    <MudText>
        <h2>Redação Enviada com Sucesso!</h2>
        <br />
        <p>@GetSelectedData()</p>
        <br /><!-- Exibindo os dados selecionados -->
        <p>
            Sua redação também foi enviada p/ sua professora p/ correção.
            Em breve, você receberá um feedback detalhado com sugestões de melhorias.<br><br>
            Acompanhe a sua nota parcial.
        </p>
    </MudText>

    <!-- Contador de Nota Simplificado -->
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-0">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6" GutterBottom>Nota Simulada de Redação do ENEM</MudText>
                <MudForm @ref="form">
                    <MudTextField @bind-Value="criterios[0]" Label="Domínio da escrita" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />
                    <MudTextField @bind-Value="criterios[1]" Label="Compreensão do tema" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />
                    <MudTextField @bind-Value="criterios[2]" Label="Interpretação das informações" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />
                    <MudTextField @bind-Value="criterios[3]" Label="Conhecimento dos mecanismos linguísticos" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />
                    <MudTextField @bind-Value="criterios[4]" Label="Respeito aos direitos humanos" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />
                    <MudText Typo="Typo.subtitle1" Class="mt-4"><strong>Nota Total: @totalNota</strong></MudText>
                </MudForm>
            </MudCardContent>
        </MudCard>
    </MudContainer><br>
    <MudButton OnClick="@ToggleOpen2" Style="margin-left: 45%" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">Fechar</MudButton>
</MudPopover>

<!--LOGICA C#-->
@code {
    private bool isDarkTheme = false; // Defina para true para tema escuro, ou configure dinamicamente
    private bool _open { get; set; }
    private bool _open2 { get; set; }
    private string nomeAluno;
    private int? ano; // Alterado para nullable int
    private int? turma; // Alterado para nullable int
    private bool isNomeAlunoError;
    private bool isAnoError;
    private bool isTurmaError;    
    private double Value { get; set; } = 0;
    private bool _disposed { get; set; }
    public void Dispose() => _disposed = true;
    private MudForm form { get; set; }
    private int totalNota { get; set; }
    private int[] criterios = new int[5];
    private string sampleText { get; set; } = string.Empty;
    private const int CharactersPerLine = 100;
    private string sampleTitle { get; set; } = string.Empty;
    private bool isButtonDisabled { get; set; } = false;
    private string[] cardTitles { get; set; } = new string[3];
    private string[] themes { get; set; } = new string[]
    {

        "Desigualdade Social no Brasil",
        "Violência Urbana e Segurança Pública",
        "Educação e Tecnologia na Era Digital",
        "Impactos das Mídias Sociais na Comunicação",
        "A Crise Hídrica e o Futuro da Água no Brasil",
        "Políticas Públicas de Saúde e Acesso à Saúde",
        "Mobilidade Urbana e Transporte Público",
        "Sustentabilidade e Consumo Consciente",
        "Juventude e Desemprego",
        "Direitos Humanos e Igualdade de Gênero",
        "A Influência da Publicidade nas Decisões de Consumo",
        "Desafios do Sistema Penitenciário Brasileiro",
        "Inclusão e Diversidade nas Escolas",
        "A Cultura do Cancelamento e a Liberdade de Expressão",
        "Questões Ambientais e Mudanças Climáticas",
        "O Papel da Família na Formação do Caráter dos Jovens",
        "Tecnologia e Privacidade: Limites e Possibilidades",
        "A Relevância das Atividades Extracurriculares na Educação",
        "Preconceito e Discriminação no Mercado de Trabalho",
        "O Impacto do Teletrabalho na Vida Profissional e Pessoal",
        "Envelhecimento da População e Políticas Públicas",
        "A Importância da Leitura na Formação do Cidadão",
        "O Papel das ONGs na Assistência Social",
        "A Influência dos Influenciadores Digitais nas Novas Gerações",
        "Globalização e Suas Consequências Locais",
        "Segurança Alimentar e Agricultura Sustentável",
        "O Desafio da Mobilidade Sustentável nas Cidades",
        "Saúde Mental e o Estigma em Relação às Doenças Psíquicas",
        "A Problemática do Lixo e Reciclagem nas Áreas Urbanas",
        "Empreendedorismo Jovem e Inovação",
        "Cultura e Identidade Nacional em um Mundo Globalizado",
        "A Eficácia das Políticas de Segurança Pública",
        "O Impacto das Novas Tecnologias na Educação",
        "Direitos dos Animais e Bem-Estar Animal",
        "A Questão da Habitação e o Crescimento das Favelas",
        "A Importância da Ética na Sociedade Contemporânea",
        "O Papel da Arte na Formação da Consciência Social",
        "Crise Econômica e Desigualdade Social",
        "O Impacto do Aquecimento Global no Brasil",
        "A Convivência Intergeracional e Seus Desafios",
        "A Cultura da Violência no Brasil",
        "A Importância da Participação Social e Política dos Jovens",
        "O Impacto da Pandemia de COVID-19 na Saúde Mental",
        "Tecnologia e Saúde: Inovações e Desafios",
        "A Importância do Voluntariado na Sociedade Atual",
        "O Papel do Estado no Combate à Pobreza",
        "Direitos Indígenas e Preservação Cultural",
        "O Uso de Drogas e Seus Impactos Sociais",
        "A Questão da Mobilidade Urbana nas Grandes Cidades",
        "A Eficiência Energética e a Sustentabilidade",
        "A Evolução do Papel da Mulher na Sociedade",
        "Cultura Digital e Seus Desafios",
        "A Relação entre Ciência e Religião na Sociedade Atual",
        "Os Desafios do Sistema Educacional Brasileiro",
        "O Problema da Evasão Escolar no Brasil",
        "A Preservação dos Biomas Brasileiros",
        "A Contribuição das Mídias Digitais na Educação",
        "O Futuro do Trabalho na Era da Automação",
        "O Desafio da Inclusão Digital no Brasil",
        "A Importância do Lazer na Qualidade de Vida"
    };   

    protected override void OnInitialized()
    {
        GenerateRandomThemes();
        base.OnInitialized();
        EmitirNota();
        OnTextChanged(); // Valida o texto ao inicializar
    }

    private void GenerateRandomThemes()
    {
        Random random = new Random();
        cardTitles[0] = themes[random.Next(themes.Length)];
        cardTitles[1] = themes[random.Next(themes.Length)];
        cardTitles[2] = themes[random.Next(themes.Length)];
    }

    private void RefreshPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private void UpdateTextFieldTitle(string cardTitle)
    {
       
        sampleTitle = cardTitle;
        OnTextChanged();
    }

    private void ToggleOpen()
    {
        _open = !_open;
    }

    private void ToggleOpen2()
    {
        _open2 = !_open2;
    }    

    private async Task StartProgress()
    {
        // Validação dos campos obrigatórios
        isNomeAlunoError = string.IsNullOrWhiteSpace(nomeAluno);
        isAnoError = ano == null; // Verifica se 'ano' é nulo
        isTurmaError = turma == null; // Verifica se 'turma' é nulo

        // Verificar se algum campo obrigatório não está preenchido
        if (isNomeAlunoError || isAnoError || isTurmaError)
        {
            // Exibir mensagens de erro e parar a execução
            Snackbar.Add("Preencha todos os campos obrigatórios.", Severity.Error);
            return;
        }
        // Normalize line endings
        var normalizedText = sampleText.Replace("\r\n", "\n").Replace("\r", "\n");

        // Log for debugging
        Console.WriteLine($"Sample Text: {normalizedText}");

        // Count the actual lines in the text
        var lines = normalizedText.Split('\n').ToList();

        // Estimate lines for any very long lines that may wrap
        int totalLines = lines.Sum(line => (int)Math.Ceiling((double)line.Length / CharactersPerLine));

        // Log for debugging
        Console.WriteLine($"Line Count: {totalLines}");

        // Check if the number of lines is between 8 and 30
        if (totalLines < 8 || totalLines > 30)
        {
            Snackbar.Add("O texto deve ter entre 8 e 30 linhas.", Severity.Error);
            return;
        }

        // If validation passes, continue with progress logic
        await SimulateProgressAsync();
    }

    public async Task SimulateProgressAsync()
    {
        Value = 0;
        _open2 = false;
        do
        {
            if (_disposed)
            {
                return;
            }
            Value += 4;
            StateHasChanged();
            await Task.Delay(100);
        } while (Value < 100);

        _open2 = true;
        StateHasChanged();

        await Task.Delay(200);
        Value = 0;
    }    

    private void EmitirNota()
    {
        var random = new Random();
        totalNota = random.Next(0, 1001); // Gera uma nota total aleatória entre 0 e 1000
        int remaining = totalNota;

        for (int i = 0; i < criterios.Length - 1; i++)
        {
            // Gere um valor aleatório para o critério, mas garanta que o total não será ultrapassado
            criterios[i] = random.Next(0, Math.Min(remaining - (criterios.Length - i - 1) * 0, 201)); // Nota mínima é 0, máxima é 200
            remaining -= criterios[i];
        }

        // O último critério recebe o restante da nota
        criterios[criterios.Length - 1] = remaining;
    }

    private string GetSelectedData()
    {
        var anoDescricao = ano switch
        {
            1 => "1ª Ano Ensino Médio",
            2 => "2ª Ano Ensino Médio",
            3 => "3ª Ano Ensino Médio",
        };

        var turmaDescricao = turma switch
        {
            1 => "Turma A",
            2 => "Turma B",
            3 => "Turma C",
            4 => "Turma D",
        };

        return $"Nome: {nomeAluno}\nAno: {anoDescricao}\nTurma: {turmaDescricao}";
    }    

  

    private void OnTextChanged()
    {

        if (string.IsNullOrWhiteSpace(sampleText))
        {
            Console.WriteLine("Text changed: " + sampleText);
            StateHasChanged();
            return;
        }

    }
          
}


