@page "/Redacao"
@page "/seu-componente"
@using MudBlazor
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web




<PageTitle>Teste Sua Redação</PageTitle>


<style>
    .text-field-container {
        display: flex;
        width: 100%;
        position: relative;
    }

    .line-numbers {
        width: 20px;
        text-align: right;
        padding-right: 5px;
        background-color: #f5f5f5;
        border-right: 1px solid #ccc;
    }

        .line-numbers div {
            height: 20px; /* Ajuste conforme necessário */
            line-height: 20px;
        }

    .MudTextField {
        /* Ensure the text field doesn't overlap with the line numbers */
        box-sizing: border-box;
    }
</style>

<MudItem xs="12" md="8" class="items-left">
    <h1>
        <MudIcon Icon="@Icons.Material.Outlined.ListAlt" />
        Editor de Redação!
    </h1>

    <p class="font-normal text-left ml-8">
        <i>Avalie como está a sua redação e receba uma nota!</i>
        <MudTooltip Text="Veja as Regras">
            <MudToggleIconButton @bind-Toggled="@_open" Icon="@Icons.Material.Filled.Info" Color="@Color.Info" ToggledIcon="@Icons.Material.Filled.FullscreenExit" ToggledColor="@Color.Secondary" />
        </MudTooltip>

        <MudPopover Open="@_open" Fixed="true" Class="px-4 pt-4">
            <div class="d-flex flex-column">
                <MudText>
                    <h3>Sobre o Texto</h3>
                    • Domínio da escrita formal em língua portuguesa.<br>
                    • Compreensão do tema e aplicação das áreas de conhecimento.<br>
                    • Capacidade de interpretação das informações e organização dos argumentos.<br>
                    • Domínio dos mecanismos linguísticos de argumentação.
                    <h3>Cálculo da Nota</h3>
                    • Para o cálculo da nota do <strong>ENEM</strong>, é usada uma régua de correção.<br>
                    • Essa régua varia de <strong>100</strong> em <strong>100</strong> pontos, tendo o <strong>500</strong> como ponto central.<br>
                    • Cada questão da prova é posicionada nessa régua, de acordo com seu grau de dificuldade.<br>
                    • As perguntas medianas ficam perto do <strong>500</strong>, as mais fáceis ficam abaixo e as mais difíceis, acima.<br><br>
                </MudText>

                <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Variant="Variant.Filled" Color="Color.Primary">Fechar</MudButton>
            </div>
        </MudPopover>
    </p>
</MudItem>

<br />

<MudGrid Class="flex flex-nowrap">
    <MudItem class="mt-4">
        <h2>Preencha seus dados:</h2>
    </MudItem>
    <MudItem xs="12" sm="3" Class="flex items-center">
        <MudTextField @bind-Value="nomeAluno" Label="Nome do Aluno" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" Variant="Variant.Filled" Error="@isNomeAlunoError" />
        @if (isNomeAlunoError)
        {
            <MudText Typo="Typo.body2" Color="Color.Error">Campo obrigatório</MudText>
        }
    </MudItem>
    <MudItem xs="12" sm="3" Class="flex-shrink-0">
        <MudSelect @bind-Value="ano" Label="Ano" T="int" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.School" Variant="Variant.Filled">
            <MudSelectItem Value="1">1ª Ano Ensino Médio</MudSelectItem>
            <MudSelectItem Value="2">2ª Ano Ensino Médio</MudSelectItem>
            <MudSelectItem Value="3">3ª Ano Ensino Médio</MudSelectItem>
        </MudSelect>
        @if (isAnoError)
        {
            <MudText Typo="Typo.body2" Color="Color.Error">Campo obrigatório</MudText>
        }
    </MudItem>
    <MudItem xs="12" sm="3" Class="flex-shrink-0">
        <MudSelect @bind-Value="turma" Label="Turma" T="int" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Group" Variant="Variant.Filled">
            <MudSelectItem Value="1">Turma A</MudSelectItem>
            <MudSelectItem Value="2">Turma B</MudSelectItem>
            <MudSelectItem Value="3">Turma C</MudSelectItem>
            <MudSelectItem Value="4">Turma D</MudSelectItem>
        </MudSelect>
        @if (isTurmaError)
        {
            <MudText Typo="Typo.body2" Color="Color.Error">Campo obrigatório</MudText>
        }
    </MudItem>
</MudGrid>

<br>

<div style="display: flex; justify-content: space-between; align-items: center; padding: 16px;">
    <p class="font-normal text-left">
        <i>Clique e escolha um tema!</i> <MudIcon Icon="@Icons.Material.Filled.ArrowDownward"></MudIcon>
    </p>

    <MudButton StartIcon="@Icons.Material.Rounded.Refresh" OnClick="@RefreshPage" Variant="Variant.Outlined" Color="Color.Primary">
        Atualize os Temas
    </MudButton>

</div>

<!--CARDS-->

<MudGrid>
    <MudItem xs="12" sm="6" md="4" lg="4">
        <MudCard @onclick='() => UpdateTextFieldTitle(cardTitles[0])'
                 style="border-radius: 12px; width: 100%; max-width: 500px; margin: auto; background-color: #37474F;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Tertiary">@cardTitles[0]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Color="Color.Tertiary">
                    <i>Para textos de apoio clique -></i>
                    <MudTooltip Text="Textos de Apoio">
                        <MudLink Href="@($"https://www.google.com/search?q={Uri.EscapeDataString(cardTitles[0])}")" Target="_blank">
                            <MudIconButton Icon="@Icons.Material.Filled.Web" Color="Color.Tertiary" />
                        </MudLink>
                    </MudTooltip>
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="4">
        <MudCard @onclick='() => UpdateTextFieldTitle(cardTitles[1])'
                 style="border-radius: 12px; width: 100%; max-width: 500px; margin: auto; background-color: #4E342E;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Tertiary">@cardTitles[1]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Color="Color.Tertiary">
                    <i>Para textos de apoio clique -></i>
                    <MudTooltip Text="Textos de Apoio">
                        <MudLink Href="@($"https://www.google.com/search?q={Uri.EscapeDataString(cardTitles[1])}")" Target="_blank">
                            <MudIconButton Icon="@Icons.Material.Filled.Web" Color="Color.Tertiary" />
                        </MudLink>
                    </MudTooltip>

                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="4">
        <MudCard @onclick='() => UpdateTextFieldTitle(cardTitles[2])'
                 style="border-radius: 12px; width: 100%; max-width: 500px; margin: auto; background-color: #004D40;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Tertiary">@cardTitles[2]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Color="Color.Tertiary">
                    <i>Para textos de apoio clique -></i>
                    <MudTooltip Text="Textos de Apoio">
                        <MudLink Href="@($"https://www.google.com/search?q={Uri.EscapeDataString(cardTitles[2])}")" Target="_blank">
                            <MudIconButton Icon="@Icons.Material.Filled.Web" Color="Color.Tertiary" />
                        </MudLink>
                    </MudTooltip>
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<br>

<!--SAMPLE TEXT-->


<div style="display: flex; justify-content: center; align-items: center;">
    <MudText Elevation="3" Typo="Typo.h5" Color="Color.Tertiary"
         Style="display: flex; justify-content: center; align-items: center; text-align: center; 
                background-color: darkslategrey; border-radius: 3px; width: 1000px; 
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
        @if (string.IsNullOrEmpty(sampleTitle))
        {
            <span style="color: bisque;">Folha de Redação</span>
        }
        else
        {
            @sampleTitle
        }
    </MudText>
</div>


<br>


<!--EDITOR DE TEXTO NOVO-->
<div style="display: flex; justify-content: center; height: 50vh;">
    <div style="border-radius: 3px; width: 1000px; padding: 0px; text-align: left;">
        @if (EditorEnabled)
        {
            <div id="toolbar" >
                <span class="ql-formats">
                    <select class="ql-font">
                        <option selected=""></option>
                        <option value="serif"></option>
                        <option value="monospace"></option>
                    </select>
                    <select class="ql-size">
                        <option value="small"></option>
                        <option selected=""></option>
                        <option value="large"></option>
                        <option value="huge"></option>
                    </select>
                </span>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                    <button class="ql-indent" value="-1"></button>
                    <button class="ql-indent" value="+1"></button>
                    <select class="ql-align">
                        <option selected=""></option>
                        <option value="center"></option>
                        <option value="right"></option>
                        <option value="justify"></option>
                    </select>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </div>
        }
        <div @ref="@divEditorElement" />
      
            @EditorContent
      
        <div>
            @((MarkupString)@EditorHTMLContent)
        </div>
    </div>
</div>


@* <!--EDITOR DE TEXTO ANTIGO-->

<div class="text-field-container" style="display: flex; align-items: flex-start; justify-content: center; width: 100%; padding: 20px;">
    <!-- Contêiner centralizado com largura fixa -->
    <div style="display: flex; align-items: flex-start; width: 1500px;">
        <!-- Números de linhas -->
        <div class="line-numbers" style="padding-right: 10px; text-align: right; user-select: none; font-family: monospace; background: white;">
         
        @for (int i = 1; i <= 35; i++)
            {
                 <div style="height: 20px; line-height: 20px;">@i</div>
            }
        </div> 

        <!-- Caixa de texto com linhas -->
        <MudTextField T="string" Label="Escreva entre 8 a 30 linhas" Variant="Variant.Text" TextChanged="OnTextChanged" Lines="35"
                      Style="width: calc(100% - 40px); height: 700px; background-image: repeating-linear-gradient(white, white 19px, #444 20px);
                              background-size: 100% 20px; line-height: 20px; padding: 10px 10px 10px 30px; font-family: monospace;" />
    </div>
</div>*@

<!--BOTAO DE ENVIAR-->
<br />
<br />

<div style="display: flex; align-items: center; margin-left: 230px">
    <MudButton Variant="Variant.Filled" DropShadow="true" Color="Color.Primary" OnClick="@StartProgress" Disabled="@isButtonDisabled" class="ml-2" style="height: 40px; margin-right: 8px;">
        Enviar
    </MudButton>
    <MudProgressLinear Color="Color.Primary" Value="@Value" Class="my-7" Striped="true" Size="Size.Small" style="width: 900px" />
</div>





<!--POPUP-->

<MudPopover Open="@_open2" Fixed="true"
            Style="position: fixed; top: 0%; margin-left: 30%; width: 90vw; max-width: 600px; height: 690vw; max-height: 690px; padding: 16px; box-sizing: border-box;"
            OnOpen="EmitirNota">
    <MudText>
        <h2>Redação Enviada com Sucesso!</h2>
        <br />
        <p>@GetSelectedData()</p>
        <br /><!-- Exibindo os dados selecionados -->
        <p>
            Sua redação foi enviada a sua professora para correção.
            Em breve, você receberá um feedback detalhado com sugestões de melhorias e sua pontuação.<br>
            Fique de olho na sua área de correções para acompanhar o seu progresso.
        </p>
    </MudText>

    <!-- Contador de Nota Simplificado -->
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-0">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6" GutterBottom>Nota Simulada de Redação do ENEM</MudText>
                <MudForm @ref="form">
                    <MudTextField @bind-Value="criterios[0]" Label="Domínio da escrita" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />
                    <MudTextField @bind-Value="criterios[1]" Label="Compreensão do tema" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />
                    <MudTextField @bind-Value="criterios[2]" Label="Interpretação das informações" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />
                    <MudTextField @bind-Value="criterios[3]" Label="Conhecimento dos mecanismos linguísticos" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />
                    <MudTextField @bind-Value="criterios[4]" Label="Respeito aos direitos humanos" Variant="Variant.Filled" InputType="InputType.Number"
                                  Min="0" Max="200" Immediate="true" ReadOnly="true" Adornment="Adornment.End" AdornmentText="/ 200" />

                    <MudText Typo="Typo.subtitle1" Class="mt-4"><strong>Nota Total: @totalNota</strong></MudText>
                </MudForm>
            </MudCardContent>
        </MudCard>
    </MudContainer><br>
    <MudButton OnClick="@ToggleOpen2" Style="margin-left: 45%" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">Fechar</MudButton>
</MudPopover>




<!--LOGICA C#-->


@code {  
    private bool _open { get; set; }
    private bool _open2 { get; set; }
    private string nomeAluno;
    private int ano;
    private int turma;
    private bool isNomeAlunoError;
    private bool isAnoError;
    private bool isTurmaError;
    private string sampleText { get; set; } = string.Empty;
    private string sampleTitle { get; set; } = string.Empty;
    private bool isButtonDisabled { get; set; } = true; 
    private string[] cardTitles { get; set; } = new string[3];
    private string[] themes { get; set; } = new string[]
    {
        "Desigualdade Social no Brasil",
        "Violência Urbana e Segurança Pública",
        "Educação e Tecnologia na Era Digital",
        "Impactos das Mídias Sociais na Comunicação",
        "A Crise Hídrica e o Futuro da Água no Brasil",
        "Políticas Públicas de Saúde e Acesso à Saúde",
        "Mobilidade Urbana e Transporte Público",
        "Sustentabilidade e Consumo Consciente",
        "Juventude e Desemprego",
        "Direitos Humanos e Igualdade de Gênero",
        "A Influência da Publicidade nas Decisões de Consumo",
        "Desafios do Sistema Penitenciário Brasileiro",
        "Inclusão e Diversidade nas Escolas",
        "A Cultura do Cancelamento e a Liberdade de Expressão",
        "Questões Ambientais e Mudanças Climáticas",
        "O Papel da Família na Formação do Caráter dos Jovens",
        "Tecnologia e Privacidade: Limites e Possibilidades",
        "A Relevância das Atividades Extracurriculares na Educação",
        "Preconceito e Discriminação no Mercado de Trabalho",
        "O Impacto do Teletrabalho na Vida Profissional e Pessoal",
        "Envelhecimento da População e Políticas Públicas",
        "A Importância da Leitura na Formação do Cidadão",
        "O Papel das ONGs na Assistência Social",
        "A Influência dos Influenciadores Digitais nas Novas Gerações",
        "Globalização e Suas Consequências Locais",
        "Segurança Alimentar e Agricultura Sustentável",
        "O Desafio da Mobilidade Sustentável nas Cidades",
        "Saúde Mental e o Estigma em Relação às Doenças Psíquicas",
        "A Problemática do Lixo e Reciclagem nas Áreas Urbanas",
        "Empreendedorismo Jovem e Inovação",
        "Cultura e Identidade Nacional em um Mundo Globalizado",
        "A Eficácia das Políticas de Segurança Pública",
        "O Impacto das Novas Tecnologias na Educação",
        "Direitos dos Animais e Bem-Estar Animal",
        "A Questão da Habitação e o Crescimento das Favelas",
        "A Importância da Ética na Sociedade Contemporânea",
        "O Papel da Arte na Formação da Consciência Social",
        "Crise Econômica e Desigualdade Social",
        "O Impacto do Aquecimento Global no Brasil",
        "A Convivência Intergeracional e Seus Desafios",
        "A Cultura da Violência no Brasil",
        "A Importância da Participação Social e Política dos Jovens",
        "O Impacto da Pandemia de COVID-19 na Saúde Mental",
        "Tecnologia e Saúde: Inovações e Desafios",
        "A Importância do Voluntariado na Sociedade Atual",
        "O Papel do Estado no Combate à Pobreza",
        "Direitos Indígenas e Preservação Cultural",
        "O Uso de Drogas e Seus Impactos Sociais",
        "A Questão da Mobilidade Urbana nas Grandes Cidades",
        "A Eficiência Energética e a Sustentabilidade",
        "A Evolução do Papel da Mulher na Sociedade",
        "Cultura Digital e Seus Desafios",
        "A Relação entre Ciência e Religião na Sociedade Atual",
        "Os Desafios do Sistema Educacional Brasileiro",
        "O Problema da Evasão Escolar no Brasil",
        "A Preservação dos Biomas Brasileiros",
        "A Contribuição das Mídias Digitais na Educação",
        "O Futuro do Trabalho na Era da Automação",
        "O Desafio da Inclusão Digital no Brasil",
        "A Importância do Lazer na Qualidade de Vida"
    };

    protected override void OnInitialized()
    {
        GenerateRandomThemes();
        base.OnInitialized();
        EmitirNota();
        ValidateText(); // Mover a validação para cá
    }

    private void GenerateRandomThemes()
    {
        Random random = new Random();
        cardTitles[0] = themes[random.Next(themes.Length)];
        cardTitles[1] = themes[random.Next(themes.Length)];
        cardTitles[2] = themes[random.Next(themes.Length)];
    }

    private void RefreshPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private void UpdateTextFieldTitle(string cardTitle)
    {
        sampleText = cardTitle;
        sampleTitle = cardTitle;
        ValidateText();
    }

    private void ToggleOpen()
    {
        _open = !_open;
    }

    private void ToggleOpen2()
    {
        _open2 = !_open2;
    }

    private int Value { get; set; } = 0;
    private bool _disposed { get; set; }

    private async Task StartProgress()
    {
        // Reset errors
        isNomeAlunoError = string.IsNullOrWhiteSpace(nomeAluno);
        isAnoError = ano == 0;
        isTurmaError = turma == 0;

        if (isNomeAlunoError || isAnoError || isTurmaError)
        {
            Snackbar.Add("Por favor, preencha todos os campos obrigatórios.", Severity.Error);
            return;
        }

        _open2 = false; // Hide the popover before starting progress
        await SimulateProgressAsync();
        // Simulate progress
        isButtonDisabled = true;
        Value = 100;
    }

    public async Task SimulateProgressAsync()
    {
        Value = 0;
        _open2 = false;
        do
        {
            if (_disposed)
            {
                return;
            }
            Value += 4;
            StateHasChanged();
            await Task.Delay(100);
        } while (Value < 100);

        _open2 = true;
        StateHasChanged();

        await Task.Delay(1000);
        Value = 0;
    }

    public void Dispose() => _disposed = true;

    private MudForm form { get; set; }
    private int[] criterios { get; set; } = new int[5] { 160, 180, 170, 150, 190 };
    private int totalNota { get; set; }

    private void EmitirNota()
    {
        totalNota = criterios.Sum();
    }

    private string GetSelectedData()
    {
        var anoDescricao = ano switch
        {
            1 => "1ª Ano Ensino Médio",
            2 => "2ª Ano Ensino Médio",
            3 => "3ª Ano Ensino Médio",
        };

        var turmaDescricao = turma switch
        {
            1 => "Turma A",
            2 => "Turma B",
            3 => "Turma C",
            4 => "Turma D",
        };

        return $"Nome: {nomeAluno}\nAno: {anoDescricao}\nTurma: {turmaDescricao}";
    }

    private const int MinRequiredLinesForEnable = 8;
    private const int MaxAllowedLines = 20;

    private void ValidateText()
    {
        // Divide o texto em linhas, remove linhas vazias e conta o número de linhas não vazias
        int lineCount = sampleText
            .Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries)
            .Count(line => !string.IsNullOrWhiteSpace(line.Trim()));

        // Define o estado do botão baseado no número de linhas
        isButtonDisabled = string.IsNullOrWhiteSpace(sampleText) || lineCount < MinRequiredLinesForEnable || lineCount > MaxAllowedLines;

        // Solicita a atualização da interface do usuário
        StateHasChanged();
    }

    

    private void OnTextChanged(string newText)
    {
       
        sampleText = newText;
        ValidateText();
    }






    private string strSavedContent = "";
    private ElementReference divEditorElement;
    private string EditorContent;
    private string EditorHTMLContent;
    private bool EditorEnabled = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);
        }
    }
    async Task GetText()
    {
        EditorHTMLContent = "";
        EditorContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillText", divEditorElement);
    }
    async Task GetHTML()
    {
        EditorContent = "";
        EditorHTMLContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillHTML", divEditorElement);
    }
    async Task GetEditorContent()
    {
        EditorHTMLContent = "";
        EditorContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillContent", divEditorElement);
    }
    async Task SaveContent()
    {
        strSavedContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillContent", divEditorElement);
    }
    async Task LoadContent()
    {
        var QuillDelta = await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.loadQuillContent", divEditorElement, strSavedContent);
    }
    async Task DisableQuillEditor()
    {
        EditorEnabled = false;
        await JSRuntime.InvokeAsync<object>(
            "QuillFunctions.disableQuillEditor", divEditorElement);
    }


}

