@page "/PesquisaIfs"

@inject HttpClient Http
@using ENEMScore.Client.Data

<PageTitle>Cursos</PageTitle>

<h3>Filtrar Cursos</h3>

<div class="filters" style="margin-bottom: 20px;">
    <label style="margin-right: 10px;">
        Universidade:
        <select value="@selectedUniversidade" @onchange="HandleUniversidadeChange">
            <option value="">Selecione uma Universidade</option>
            @foreach (var universidade in universidades)
            {
                <option value="@universidade">@universidade</option>
            }
        </select>
    </label>

    @if (!string.IsNullOrEmpty(selectedUniversidade))
    {
        <label style="margin-right: 10px;">
            Campus:
            <select value="@selectedCampus" @onchange="HandleCampusChange">
                <option value="">Selecione um Campus</option>
                @foreach (var campus in campi)
                {
                    <option value="@campus">@campus</option>
                }
            </select>
        </label>
    }

    @if (!string.IsNullOrEmpty(selectedCampus))
    {
        <label style="margin-right: 10px;">
            Ano:
            <select value="@selectedAno" @onchange="HandleAnoChange">
                <option value="">Selecione um Ano</option>
                @foreach (var ano in anos)
                {
                    <option value="@ano">@ano</option>
                }
            </select>
        </label>

        <label style="margin-right: 10px;">
            Curso:
            <select value="@selectedCurso" @onchange="HandleCursoChange">
                <option value="">Selecione um Curso</option>
                @foreach (var curso in cursosDisponiveis)
                {
                    <option value="@curso">@curso</option>
                }
            </select>
        </label>
    }

    @if (!string.IsNullOrEmpty(selectedCurso))
    {
        <label style="margin-right: 10px;">
            Turno:
            <select value="@selectedTurno" @onchange="HandleTurnoChange">
                <option value="">Selecione um Turno</option>
                @foreach (var turno in turnos)
                {
                    <option value="@turno">@turno</option>
                }
            </select>
        </label>

        <label style="margin-right: 10px;">
            Tipo:
            <select value="@selectedTipo" @onchange="HandleTipoChange">
                <option value="">Selecione um Tipo</option>
                @foreach (var tipo in tipos)
                {
                    <option value="@tipo">@tipo</option>
                }
            </select>
        </label>
    }
</div>

@if (notaDeCorte.HasValue)
{
    <h4>Nota de Corte: @notaDeCorte.Value</h4>
}

@code {
    private List<CursoInfo> cursos = new List<CursoInfo>();
    private string selectedUniversidade = string.Empty;
    private string selectedCampus = string.Empty;
    private int? selectedAno;
    private string selectedCurso = string.Empty;
    private string selectedTurno = string.Empty;
    private string selectedTipo = string.Empty;
    private double? notaDeCorte;

    private List<string> universidades = new List<string>();
    private List<string> campi = new List<string>();
    private List<int> anos = new List<int>();
    private List<string> cursosDisponiveis = new List<string>();
    private List<string> turnos = new List<string>();
    private List<string> tipos = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        cursos = await Http.GetFromJsonAsync<List<CursoInfo>>("Data/lista.json");
        universidades = cursos.Select(c => c.Universidade).Distinct().ToList();
        // Inicialmente, todos os demais dropdowns estão vazios até que uma escolha seja feita
    }

    private async Task HandleUniversidadeChange(ChangeEventArgs e)
    {
        selectedUniversidade = e.Value.ToString();
        campi = cursos.Where(c => c.Universidade == selectedUniversidade)
                      .Select(c => c.Campus).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Universidade");
    }

    private async Task HandleCampusChange(ChangeEventArgs e)
    {
        selectedCampus = e.Value.ToString();
        anos = cursos.Where(c => c.Campus == selectedCampus)
                     .Select(c => c.Ano).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Campus");
    }

    private async Task HandleAnoChange(ChangeEventArgs e)
    {
        selectedAno = int.Parse(e.Value.ToString());
        cursosDisponiveis = cursos.Where(c => c.Campus == selectedCampus && c.Ano == selectedAno)
                                  .Select(c => c.Curso).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Ano");
    }

    private async Task HandleCursoChange(ChangeEventArgs e)
    {
        selectedCurso = e.Value.ToString();
        turnos = cursos.Where(c => c.Curso == selectedCurso)
                       .Select(c => c.Turno).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Curso");
    }

    private async Task HandleTurnoChange(ChangeEventArgs e)
    {
        selectedTurno = e.Value.ToString();
        tipos = cursos.Where(c => c.Turno == selectedTurno && c.Curso == selectedCurso)
                      .Select(c => c.Tipo).Distinct().ToList();
        ResetLowerFilters(fromLevel: "Turno");
    }

    private async Task HandleTipoChange(ChangeEventArgs e)
    {
        selectedTipo = e.Value.ToString();
        UpdateNotaDeCorte();
    }

    private void UpdateNotaDeCorte()
    {
        notaDeCorte = cursos.FirstOrDefault(c => c.Universidade == selectedUniversidade &&
                                                 c.Campus == selectedCampus &&
                                                 c.Ano == selectedAno &&
                                                 c.Curso == selectedCurso &&
                                                 c.Turno == selectedTurno &&
                                                 c.Tipo == selectedTipo)?.NotaDeCorte;
    }

    private void ResetLowerFilters(string fromLevel)
    {
        switch (fromLevel)
        {
            case "Universidade":
                selectedCampus = null;
                anos.Clear();
                cursosDisponiveis.Clear();
                turnos.Clear();
                tipos.Clear();
                break;
            case "Campus":
                selectedAno = null;
                cursosDisponiveis.Clear();
                turnos.Clear();
                tipos.Clear();
                break;
            case "Ano":
                selectedCurso = null;
                turnos.Clear();
                tipos.Clear();
                break;
            case "Curso":
                selectedTurno = null;
                tipos.Clear();
                break;
            case "Turno":
                selectedTipo = null;
                break;
        }
        notaDeCorte = null; // Reset the score when changing any filter above
        StateHasChanged(); // Force re-rendering to update the UI
    }
}
