@page "/CursosUfs"
@using ENEMScore.Client
@inject HttpClient Http

<PageTitle>Cursos e Pontuações</PageTitle>

<MudItem xs="12" md="8" class="items-left">
    <h1>
        <MudIcon Icon="@Icons.Material.Outlined.ListAlt" />
        Cursos e Pontuações!
    </h1>
    <p class="font-normal text-left ml-8">
        <i>Pesquise os cursos e suas pontuações!</i>
    </p>
</MudItem>

<br />

<!--FORMS-->
<MudGrid>
    <MudItem xs="12" md="6" mb="auto">
        <MudText Typo="Typo.h5" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-2" />
            UNIVERSIDADE FEDERAL: (UFS)
        </MudText>

        <MudSelect T="string" @bind-Value="selectedUniversidade" Label="Universidade" Class="mb-2" @onchange="UpdateData" FullWidth="true">
            @foreach (var item in GetUniversidade())
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="int" @bind-Value="selectedAno" Label="Ano" Class="mb-2" @onchange="UpdateData" FullWidth="true">
            @foreach (var item in GetAno())
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="string" @bind-Value="selectedCampus" Label="Campus" Class="mb-2" @onchange="UpdateData" FullWidth="true">
            @foreach (var item in GetCampus())
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="string" @bind-Value="selectedCurso" Label="Curso" Class="mb-2" @onchange="UpdateData" FullWidth="true">
            @foreach (var curso in GetCursos())
            {
                <MudSelectItem Value="@curso">@curso</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="string" @bind-Value="selectedTurno" Label="Turno" Class="mb-2" FullWidth="true">
            @if (!string.IsNullOrEmpty(selectedCurso))
            {
                @foreach (var turno in GetTurnos())
                {
                    <MudSelectItem Value="@turno">@turno</MudSelectItem>
                }
            }
        </MudSelect>

        <MudSelect T="string" @bind-Value="selectedTipo" Label="Tipo" Class="mb-2" FullWidth="true">
            @foreach (var item in GetTipos())
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="decimal" @bind-Value="selectedNotaDeCorte" Label="Nota de Corte" Class="mb-2" FullWidth="true">
            @foreach (var curso in cursos)
            {
                if (decimal.TryParse(curso.NotaDeCorte, out var notaDeCorte))
                {
                    <MudSelectItem Value="@notaDeCorte">@curso.NotaDeCorte</MudSelectItem>
                }
            }
        </MudSelect>

    <!-- Seção de Pesos -->
        <MudTooltip Text="Expandir Pesos">
            <MudButton StartIcon="@Icons.Material.Filled.Info" IconColor="Color.Info" Size="Size.Medium" @onclick="ToggleCollapse">
                Confira os Pesos
            </MudButton>
        </MudTooltip>

        <MudCollapse Expanded="_expanded">
            <MudText Typo="Typo.h6" Align="Align.Left" Class="ml-8">
                Pesos ENEM: @selectedCurso
            </MudText>
            <MudDivider />
            <ul class="mud-list" style="list-style-type: none; padding-left: 1.5rem; margin: 0;">
                <li class="mud-list-item" style="padding: 8px; display: flex; align-items: center;">
                    <MudIcon Icon="@Icons.Material.Outlined.Code" />
                    <MudText Class="ml-2">Linguagens, Códigos e suas Tecnologias: <strong>30%</strong></MudText>
                </li>
                <li class="mud-list-item" style="padding: 8px; display: flex; align-items: center;">
                    <MudIcon Icon="@Icons.Material.Outlined.Calculate" />
                    <MudText Class="ml-2">Matemática e suas Tecnologias: <strong>20%</strong></MudText>
                </li>
                <li class="mud-list-item" style="padding: 8px; display: flex; align-items: center;">
                    <MudIcon Icon="@Icons.Material.Outlined.Nature" />
                    <MudText Class="ml-2">Ciências da Natureza e suas Tecnologias: <strong>10%</strong></MudText>
                </li>
                <li class="mud-list-item" style="padding: 8px; display: flex; align-items: center;">
                    <MudIcon Icon="@Icons.Material.Outlined.Book" />
                    <MudText Class="ml-2">Ciências Humanas e suas Tecnologias: <strong>40%</strong></MudText>
                </li>
            </ul>
        </MudCollapse>
    </MudItem>

    <!-- CALCULADORA Seção à direita com Tabs -->
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h5" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Outlined.Calculate" Class="me-2" /> CALCULADORA
        </MudText>
        <MudTabs Elevation="4" Rounded="true" Centered="false" Color="@Color.Primary">
            <MudTabPanel Text="Por Notas">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5"></MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6" Class="mb-3">
                                <MudTextField Label="Nota de Matemática" @bind-Value="MathScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12" sm="6" Class="mb-3">
                                <MudTextField Label="Nota de Linguagens" @bind-Value="LanguageScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12" sm="6" Class="mb-3">
                                <MudTextField Label="Nota de Ciências da Natureza" @bind-Value="NatureSciencesScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12" sm="6" Class="mb-3">
                                <MudTextField Label="Nota de Ciências Humanas" @bind-Value="HumanSciencesScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12" Class="mb-3">
                                <MudTextField Label="Nota da Redação" @bind-Value="EssayScore" Type="number" Variant="Variant.Filled" FullWidth="true" Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="12" Class="mb-3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CalculateScore">Calcular</MudButton>
                            </MudItem>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6">Nota Final: @FinalScore</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>

            <MudTabPanel Text="Por Peso">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5"></MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="6" Class="mb-3">
                                <MudTextField @bind-Value="MathScore" Label="Nota de Matemática" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="6" Class="mb-3">
                                <MudTextField @bind-Value="LanguageScore" Label="Nota de Linguagens" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="6" Class="mb-3">
                                <MudTextField @bind-Value="NatureSciencesScore" Label="Nota de Ciências da Natureza" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="6" Class="mb-3">
                                <MudTextField @bind-Value="HumanSciencesScore" Label="Nota de Ciências Humanas" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" Class="mb-3">
                                <MudTextField @bind-Value="EssayScore" Label="Nota da Redação" Variant="Variant.Filled" Margin="Margin.Dense" Type="number" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" Class="mb-3">
                                <MudButton OnClick="CalculateScore" Variant="Variant.Filled" Color="Color.Primary">Calcular</MudButton>
                            </MudItem>
                            @if (FinalScore >= 0)
                            {
                                <MudItem xs="12">
                                    <MudText Typo="Typo.h6">Pontuação Final: @FinalScore</MudText>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>
        </MudTabs>
    </MudItem>
</MudGrid>


@code {

    bool _expanded = false;

    private void ToggleCollapse()
    {
        _expanded = !_expanded;
    }

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    // Variáveis e classes
    private List<CursoInfo> cursos = new List<CursoInfo>();
    private string selectedUniversidade;
    private int selectedAno;
    private string selectedCampus;
    private string selectedCurso;
    private string selectedTurno;
    private string selectedTipo;
    private decimal selectedNotaDeCorte;

    protected override async Task OnInitializedAsync()
    {
        // Carrega os cursos da lista JSON
        cursos = await Http.GetFromJsonAsync<List<CursoInfo>>("Data/lista.json");
        selectedNotaDeCorte = 0; // Inicializando para evitar null
    }

    // Classe para representar os dados de um curso
    public class CursoInfo
    {
        public string Universidade { get; set; }
        public int Ano { get; set; }  // Alterado para int
        public string Campus { get; set; }
        public string Curso { get; set; }
        public string Turno { get; set; }
        public string Tipo { get; set; }
        public string NotaDeCorte { get; set; }
    }

    // Métodos para filtrar as opções com base na seleção anterior
    private IEnumerable<string> GetUniversidade()
    {
        return cursos.Select(c => c.Universidade).Distinct();
    }

    private IEnumerable<int> GetAno()
    {
        return cursos
            .Where(c => c.Universidade == selectedUniversidade)
            .Select(c => c.Ano)  // Retorna os anos como int
            .Distinct();
    }

    private IEnumerable<string> GetCampus()
    {
        return cursos
            .Where(c => c.Universidade == selectedUniversidade && c.Ano == selectedAno)
            .Select(c => c.Campus)
            .Distinct();
    }

    private IEnumerable<string> GetCursos()
    {
        return cursos
            .Where(c => c.Universidade == selectedUniversidade && c.Ano == selectedAno && c.Campus == selectedCampus)
            .Select(c => c.Curso)
            .Distinct();
    }

    private IEnumerable<string> GetTurnos()
    {
        return cursos
            .Where(c => c.Curso == selectedCurso && c.Campus == selectedCampus && c.Ano == selectedAno)
            .Select(c => c.Turno)
            .Distinct();
    }

    private IEnumerable<string> GetTipos()
    {
        return cursos
            .Where(c => c.Curso == selectedCurso && c.Campus == selectedCampus && c.Ano == selectedAno)
            .Select(c => c.Tipo)
            .Distinct();
    }

    private void UpdateData()
    {
        Console.WriteLine($"Turno: {selectedTurno}, Curso: {selectedCurso}, Ano: {selectedAno}, Tipo: {selectedTipo}");

        // Chame GetNotaDeCorte e verifique o retorno
        var pontuacao = GetNotaDeCorte(selectedTurno, selectedCurso, selectedAno, selectedTipo);
        Console.WriteLine($"Nota de Corte retornada: {pontuacao}");

        if (decimal.TryParse(pontuacao, out var result))
        {
            selectedNotaDeCorte = result;
        }
        else
        {
            Console.WriteLine("Falha ao converter a nota de corte.");
            selectedNotaDeCorte = 0; // Define como 0 se a conversão falhar
        }
    }




    private string GetNotaDeCorte(string turno, string curso, int ano, string tipo)
    {
        // Verifique se os parâmetros não estão nulos ou vazios
        if (string.IsNullOrEmpty(turno) || string.IsNullOrEmpty(curso) || string.IsNullOrEmpty(tipo))
            return string.Empty;

        var cursoSelecionado = cursos.FirstOrDefault(c =>
            c.Turno == turno &&
            c.Curso == curso &&
            c.Campus == selectedCampus &&
            c.Ano == ano &&
            c.Tipo == tipo);
        return cursoSelecionado?.NotaDeCorte ?? string.Empty; // Retorna uma string vazia se não encontrado
    }


    // Variáveis para calculadora
    private double MathScore { get; set; }
    private double LanguageScore { get; set; }
    private double NatureSciencesScore { get; set; }
    private double HumanSciencesScore { get; set; }
    private double EssayScore { get; set; }
    private double FinalScore { get; set; }

    private void CalculateScore()
    {
        // Fórmula exemplo, adapte conforme necessário
        FinalScore = (MathScore + LanguageScore + NatureSciencesScore + HumanSciencesScore + EssayScore) / 5;
    }
}
