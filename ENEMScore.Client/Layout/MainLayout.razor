@inherits LayoutComponentBase
@inject IDarkModeService DarkModeService
@inject HttpClient Http

<div style="@(DarkModeService.isDarkMode ? "background-image: url('/img/background-loaddark.png');" :
"background-image: url('/img/background-loadd.png');") background-size: cover; background-position: center;
    background-repeat: no-repeat; background-attachment: fixed; min-height: 100vh;">

    <MudThemeProvider Theme="@_theme" IsDarkMode="DarkModeService.isDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />

    @if (isLoading)
    {
        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; background-image: url('/img/background-load2.png'); background-size: cover; background-position: center; width: 100vw;">
            <img src="/img/logo-enemscore.png" alt="Loading" style="width: 500px; height: auto; margin-bottom: 20px" />

            <div style="position: relative; width: 200px;">
                <MudProgressLinear Color="Color.Primary" Class="my-7" Style="width: 100%;" Rounded="true" Size="Size.Large" Value="@Value" />                
                <span style="position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);font-size: 10px;color:@(Value > 50 ? "white" : "black");">
                    @Math.Round((double)Value, 0)%
                </span>
            </div>
        </div>
    }

    else
    {
        <MudLayout>
            <MudAppBar Color="Color.Primary" Elevation="5" Class="flex items-center h-15">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />

                <MudText Class="ml-5 h-px items-center">
                    <a href="/">
                        <img src="/img/logo-white-horizontal.png" alt="logo horizontal" style="width: 180px; height: auto;" />
                    </a>
                </MudText>

                <MudSpacer />

                <MudTooltip Text="@tooltipText">
                    <span class="ml-3 text-white">
                        @if (Weather != null && Weather.Main != null)
                        {
                            // Arredonda a temperatura
                            var temperature = Math.Round(Weather.Main.Temp);

                            // Define a cidade ou usa "Aracaju" como padrão
                            var city = Weather.Name ?? "Aracaju";

                            // Obtém o código do ícone da API
                            var iconCode = Weather.Weather.FirstOrDefault()?.Icon;

                            // Verifica se o código do ícone está presente; usa um ícone padrão se não estiver
                            var iconUrl = !string.IsNullOrEmpty(iconCode)
                            ? $"https://openweathermap.org/img/wn/{iconCode}@2x.png"
                            : "https://openweathermap.org/img/wn/01d@2x.png";

                            // Exibe o ícone e os dados de temperatura
                            <img src="@iconUrl" alt="Weather Icon"
                                 style="width:50px; height:50px; vertical-align: middle;" />
                            <span>@($"{temperature}°C {city}")</span>
                        }
                        else
                        {
                            <span>Clima indisponível</span>
                        }
                    </span>
                </MudTooltip>

                <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeService.ToogleDarkMode"  />
                <span>@DarkLightModeButtonText</span>
            </MudAppBar>

            <MudDrawer Color="Color.Default" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="3">
                <NavMenu />
            </MudDrawer>
            <MudMainContent Class="mt-16 pa-4">
                @Body
            </MudMainContent>
        </MudLayout>
    }
</div>


@code {
    private bool _drawerOpen { get; set; } = false;
    private MudTheme? _theme { get; set; } = null;
    private bool isLoading = true;
    private WeatherResponse Weather { get; set; }
    private string chuvaText { get; set; }
    public int Value { get; set; } = 0;
    private Timer _timer;
    private string tooltipText = string.Empty; // Variável para armazenar o texto do tooltip

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        DarkModeService.OnChange += StateHasChanged;

        _theme = new MudTheme
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };

        // Carrega o clima de Aracaju
        await LoadWeather();

        // Definir o texto do tooltip com base nos dados da API
        if (Weather != null)
        {
            // Definir texto para o tooltip
            var chuva = Weather.Rain?.OneHour > 0 ? $"{Weather.Rain.OneHour} mm" : "Sem Chuva";
            var umidade = Weather.Main.Humidity;

            // Verificar se o valor da velocidade do vento não é nulo, converter para km/h, e arredondar
            var vento = Weather.Wind != null ? Math.Round(Weather.Wind.Speed * 3.6) : (double?)null;

            // Formatar o texto do tooltip com a velocidade inteira em km/h ou uma mensagem padrão se estiver nula
            tooltipText = $"Chuva: {chuva} | Umidade: {umidade}% | Vento: {(vento.HasValue ? $"{vento} km/h" : "Sem dados de vento")}";
        }

        StartLoading();
        await InvokeAsync(StateHasChanged);
    }

    private void StartLoading()
    {
        _timer = new Timer(async _ =>
        {
            if (Value < 100)
            {
                Value += 10;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                _timer.Dispose();
                isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        }, null, 0, 200);
    }

    private async Task LoadWeather()
    {
        try
        {
            var url = $"https://api.openweathermap.org/data/2.5/weather?q=Aracaju,BR&appid=6262c099aff877c5a6988ee8cb91722b&units=metric";
            var response = await Http.GetFromJsonAsync<WeatherResponse>(url);

            if (response != null)
            {
                Weather = response;

                // Logs para depuração
                Console.WriteLine($"Temperatura: {Weather.Main.Temp}");
                Console.WriteLine($"Icon Code: {Weather.Weather.FirstOrDefault()?.Icon}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro ao carregar dados da API:");
            Console.WriteLine(ex.Message);
        }
    }


    public void Dispose()
    {
        DarkModeService.OnChange -= StateHasChanged;
        _timer?.Dispose();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Primary = "#0060b8",
            Secondary = "#02693d",
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
            Tertiary = "#E0E0E0"
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#0060b8",
            PrimaryDarken = "rgb(62,44,221)",
            PrimaryLighten = "rgb(151,141,236)",
            SecondaryDarken = "rgb(255,31,105)",
            SecondaryLighten = "rgb(255,102,153)",
            Tertiary = "#ffffff",
            TertiaryDarken = "rgb(25,169,140)",
            TertiaryLighten = "rgb(42,223,187)",
            Info = "#4a86ff",
            InfoDarken = "rgb(10,133,255)",
            InfoLighten = "rgb(92,173,255)",
            Success = "#3dcb6c",
            SuccessDarken = "rgb(9,154,108)",
            SuccessLighten = "rgb(13,222,156)",
            Warning = "#ffb545",
            WarningDarken = "rgb(214,143,0)",
            WarningLighten = "rgb(255,196,120)",
            Error = "#f45151",
            ErrorDarken = "rgb(192,0,0)",
            ErrorLighten = "rgb(252,88,88)",
            Black = "#1e1e2d",
            DarkDarken = "rgb(23,23,28)",
            DarkLighten = "rgb(56,56,67)",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            AppbarBackground = "rgba(26,26,39,0.8)",
            AppbarText = "#92929f",
            DrawerBackground = "#1a1a27",
            DrawerText = "#d9d9d9",
            DrawerIcon = "#5c5c5e",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#d9d9d9",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "rgba(255,255,255,0.4980392156862745)",
            OverlayDark = "rgba(33,33,33,0.4980392156862745)",
            HoverOpacity = 0.06,
            RippleOpacity = 0.1,
            RippleOpacitySecondary = 0.2,
            GrayDefault = "#9E9E9E",
            GrayLight = "#BDBDBD",
            GrayLighter = "#E0E0E0",
            GrayDark = "#757575",
            GrayDarker = "#616161"
        };

    public string DarkLightModeButtonIcon => DarkModeService.isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    public string DarkLightModeButtonText => DarkModeService.isDarkMode ? "Claro" : "Escuro";

    public class WeatherResponse
    {
        public Main Main { get; set; }
        public string Name { get; set; }
        public List<WeatherDetails> Weather { get; set; }
        public Rain Rain { get; set; }
        public Wind Wind { get; set; }
    }

    public class Main
    {
        public float Temp { get; set; }
        public int Humidity { get; set; } // Umidade
    }

    public class WeatherDetails
    {
        public string Description { get; set; }
        public string Icon { get; set; }
    }

    public class Rain
    {
        public float OneHour { get; set; } // Quantidade de chuva em 1 hora
    }

    public class Wind
    {
        public float Speed { get; set; } // Velocidade do vento
    }
}
