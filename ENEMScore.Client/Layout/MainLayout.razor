@inherits LayoutComponentBase
@inject IDarkModeService DarkModeService



<MudThemeProvider Theme="@_theme" IsDarkMode="DarkModeService.isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <MudAppBar Color="Color.Primary" Elevation="5" Class="flex items-center h-15">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />

        <MudText Class="ml-5 h-px items-center">
            <a href="/">
                <img src="/img/logo-white-horizontal.png" alt="logo horizontal" style="width: 150px; height: auto;" />
            </a>
        </MudText>

        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeService.ToogleDarkMode" />
        <span>@DarkLightModeButtonText</span>
    </MudAppBar>

    <MudDrawer Color="Color.Default" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="3">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen { get; set; } = false;
    private MudTheme? _theme { get; set; } = null;

    protected override void OnInitialized()
    {
        // Inscrição no evento OnChange para garantir que o layout seja atualizado quando o tema mudar
        DarkModeService.OnChange += StateHasChanged;

        _theme = new MudTheme
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
    }

    public void Dispose()
    {
        // Cancelar a inscrição do evento para evitar vazamentos de memória
        DarkModeService.OnChange -= StateHasChanged;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Primary = "#0060b8",
            Secondary = "#02693d",
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
            Tertiary = "#E0E0E0"
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#002c54",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#d9d9d9",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff",
            DrawerIcon = "#5c5c5e",
            DrawerText = "#d9d9d9",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
            Tertiary = "#ffffff"
        };

    public string DarkLightModeButtonIcon => DarkModeService.isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    public string DarkLightModeButtonText => DarkModeService.isDarkMode ? "" : "";
}
